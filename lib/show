#!/bin/sh

function validate_modifiers {
  OUTPUT="/dev/stdout"

  [[ "$1" == "-h" ]] && show_usage

  while [ $# -gt 0 ]
  do
    [[ "$1" == "-n" ]] && NO_CLIPBOARD=true
    [[ "$1" == "-1" ]] && ONE_TIME=true
    [[ "$1" == "-s" ]] && OUTPUT="/dev/null"
    [[ $1 != -* ]] && TOKEN_NAME="$1"
    shift
  done
}

function decrypt_token_from_file {
  read -s -r -p "OTP Password: " PASSWORD
  echo $PASSWORD | openssl enc -aes-256-cbc -d -salt -pass stdin -in $1
}

function plaintext_token_from_file {
  cat $1
}

function check_file {
  TOKEN_PATH=${TOKENFILES_DIR}/${TOKEN_NAME}
  FILES=("${TOKEN_PATH}.enc" "${TOKEN_PATH}")

  for file in ${FILES[@]}; do
    if [[ -f "${file}" ]]; then
      check_permissions $file "400"
      TOKEN_FILE="${file}"
      return 0
    fi
  done

  echo "ERROR: Token files [${FILES[@]}] doesn't exist"
  exit 1
}

function get_token {
  if [[ ${TOKEN_FILE} == *.enc ]]; then
    TOKEN=$( decrypt_token_from_file $TOKEN_FILE )
    echo > $( echo "$OUTPUT" )
  else
    TOKEN=$( plaintext_token_from_file $TOKEN_FILE )
  fi
}

function verify_command {
  command -v $1 >/dev/null 2>&1 || { echo >&2 "Required '$1'. Install it and try again."; echo "Aborting."; exit 1; }
}

function copy_to_clipboard {
  if [ "$NO_CLIPBOARD" != "true" ]; then
    if [ "$X" != "$LAST_PASSWORD" ]; then
      if [[ $OS = "Darwin" ]]; then
        verify_command "pbcopy"
        printf "$X" | pbcopy
      elif [[ $OS = "Linux" ]]; then
        verify_command "xclip"
        printf "$X" | xclip -sel clip
      fi
      LAST_PASSWORD="$X"
    fi
  fi
}

function show_usage {
  [[ -n "$1" ]] && echo "ERROR: $1"
  echo "Usage: $( basename ${0} ) show [-h] [-1] [-n] [-s] <Token Name>"
  echo
  echo " -h : This help"
  echo " -1 : Get one password and exit."
  echo " -n : Do not copy to clipboard."
  echo " -s : Silent. Do not output anything to console."
  exit 1
}

#Init
verify_command "openssl"

validate_modifiers $@

if [[ -z "$TOKEN_NAME" ]]; then
  read -r -p "Token name: " TOKEN_NAME
  if [[ -z "$TOKEN_NAME" ]]; then
    show_usage "Token name can not be empty"
    exit 1
  fi
fi

check_file
get_token

[[ ! $TOKEN =~ ^[0-9A-Z]+$ ]] && exit 1

LAST_PASSWORD=0

while true; do
  D="$( printf "%.2d" $( expr `date +%S` % 30 ) )"
  X=$( oathtool --totp -b "$TOKEN" )

  copy_to_clipboard $X

  printf "\r[$D] $X" > $( echo "$OUTPUT" )

  [[ $ONE_TIME ]] && echo && exit 0

  sleep 1
done
